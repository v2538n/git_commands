#Настройки
----------------------------------------------------------------
git config --list - посмотреть список настроек конфигурации git
				  --show-origin - с указанием, где прописаны параметры

git config user.name - узнать какое значение указано

git config --global user.name "John Doe"
git config --global user.email johndoe@example.com 
git config --global core.editor emacs

#Помощь
----------------------------------------------------------------
git command_name --help - получить помощь по команде git
git command_name -h - краткий вывод опций команды

----------------------------------------------------------------

git clone url - клонирование репозитория


git status - вывод информации о состоянии файлов
		   - s / --short - модификатор для сокращенного вывода

git diff - что изменили, но еще не проиндексировали
		 --staged - что уже проиндексировали и попадет в коммит


git add - добавить новый файл под версионный контроль, если новый, или добавить в индекс измененный, ранее отслеживаемый файл (а также для других целей, например для указания файлов с исправленным конфликтом слияния)

git commit -a -m "describe commit" - зафиксировать индекс (-a пропуск стадии индекса, -m "" - описание коммита)

git commit -m "" --amend - заменить последний коммит (перезапись последнего коммита без создания нового)  

----------------------------------------------------------------

git rm --cached file_name - удалить файл из контроля версий, файл отмечается как не отслеживаемый 

git checkout -- file_name - удалить изменения из рабочей области
git restore file_name - тоже самое

git restore --staged file_name - удалить изменения, добавленные в индекс
git reset head file_name - тоже позволяет удалить изменения из индекса

================================================================

git-revert посвящен созданию нового коммита, который отменяет изменения, сделанные другими коммитами.

git-restore посвящен восстановлению файлов в рабочем дереве из индекса или другого коммита.
Эта команда не обновляет вашу ветку.
Команду также можно использовать для восстановления файлов в индексе из другого коммита.

git-reset посвящен обновлению вашей ветки, перемещению подсказки для добавления или удаления коммитов из ветки. Эта операция изменяет историю коммитов.
git reset также можно использовать для восстановления индекса, перекрывая git restore

Чтобы восстановить файл в индексе, чтобы он соответствовал версии в HEAD (это аналогично использованию git-reset)

git restore --staged hello.c
или вы можете восстановить как индекс, так и рабочее дерево (это так же, как при использовании git-checkout)

git restore --source=HEAD --staged --worktree hello.c
или краткая форма, которая более практична, но менее читабельна:

git restore -s@ -SW hello.c

https://fooobar.com/questions/15067548/how-to-reset-all-files-from-working-directory-but-not-from-staging-area/27125865#27125865

================================================================
----------------------------------------------------------------

git mv file_name new_file_name - переименование файла

----------------------------------------------------------------

git log 	   - история коммитов
	--oneline  - сокращенный вывод в одну строку с сокращеннымыми хешами коммитов
	--all      - вывод коммитов со всех веток
	--graph    - графическое отображение ветвления
	--decorate - видимо, устаревшее (должно выводить указатель на ветку, но он и без робит) 

git log -p -2 - показать отличия в коммитах и ограничение на вывод последних двух коммитов

git log --stat - сокращенная статистика по коммитам



git log --pretty=format:"%h - %an, %ar : %s" - пользовательский вывод 

https://git-scm.com/book/ru/v2/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2#rlog_options

git log -S function_name - поиск коммита, в котором была удалена или добавлена строка, содержащая "function_name

--file_name/path - опция сортировки по названию файла или пути, указывается последней, после всех фильтров

--no-merges - исключить коммиты слияния 

----------------------------------------------------------------

#Удаленные сервера
----------------------------------------------------------------

git remote -v - просмотр списка удаленных серверов с указанием адресов на чтение и запись
git remote rename origin new_name - переименование 
git remote rm origin - удалить репу

git remote show origin - детальная информация по удаленным серверам

git remote add origin https://github.com/username/repo_name.git

git fetch origin - получить изменения из удаленного репозитория без слияния

git pull - получить изменения и слить (merge) в автоматическом режиме, если нет конфликта

git push origin master - отправка локальных изменений на удаленный сервер

----------------------------------------------------------------

	git branch             - список веток
	git branch -v          - последние коммиты в ветках
	git branch test        - создание ветки
	git branch -d test     - удаление ветки
	git branch --merged    - список веток, которые уже влиты в текущую
	git branch --no-merged - список веток, которые еще не были слиты 
	
	git checkout -b test - создать и переключиться на ветку
	git checkout test    - переключиться на ветку

	git merge test       - слияние веток   
	git mergetool        - редактор слияния

----------------------------------------------------------------

git config --global alias.co checkout - добавить псевдоним для команды

git config --global --list - вывести список заданных псевдонимов

----------------------------------------------------------------